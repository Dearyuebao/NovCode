/*
// Definition for a Node.
class Node {
    public int val;
    public Node next;

    public Node() {}

    public Node(int _val,Node _next) {
        val = _val;
        next = _next;
    }
};
*/
class Solution {
    public Node insert(Node head, int insertVal) {
        Node newNode = new Node(insertVal, null);
        if(head == null) {
            newNode.next = newNode;
            return newNode;
        }
        Node now = head;
        do{
            if((insertVal >= now.val && insertVal <= now.next.val) || ((now.val > now.next.val) && (insertVal >= now.val || insertVal <= now.next.val))) {
                newNode.next = now.next;
                now.next = newNode;
                return head;
            }
            now = now.next;
        } while(now != head);
        newNode.next = now.next;
        now.next = newNode;
        return head;
    }
}

insert node to a sorted node list, insert at front/end/middle
